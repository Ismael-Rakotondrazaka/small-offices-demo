// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  output                 = "../../../generated/prisma"
  provider               = "prisma-client"
  runtime                = "nodejs"
  moduleFormat           = "esm"
  generatedFileExtension = "ts"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // @see https://github.com/prisma/prisma/discussions/24412
  // To avoid being stuck when pushing or migrating
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  EDITOR
}

model UserRole {
  id   String @id
  role Role   @default(EDITOR)
}

enum OfficeType {
  INDEPENDENT_SPACE
  PRIVATE_OFFICE
  OPEN_SPACE
}

model Office {
  id             String          @id @default(uuid())
  title          String
  slug           String          @unique
  price          Float
  arr            Int
  posts          Int
  type           OfficeType
  isFake         Boolean         @default(false)
  lat            Float
  lng            Float
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?
  photos         Photo[]
  leads          Lead[]
  officeServices OfficeService[]
}

model Photo {
  id        String   @id @default(uuid())
  officeId  String
  office    Office   @relation(fields: [officeId], references: [id])
  url       String
  alt       String?
  createdAt DateTime @default(now())
}

enum LeadStatus {
  PENDING // Lead has not been contacted yet
  CONTACTED // Lead has been contacted
  CONVERTED // Lead has been converted to a client
  LOST // Lead has been lost
  DELETED // Lead has been deleted
}

model Lead {
  id        String     @id @default(uuid())
  officeId  String
  office    Office     @relation(fields: [officeId], references: [id])
  name      String
  email     String
  phone     String?
  status    LeadStatus @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Service {
  id             String          @id @default(uuid())
  name           String
  icon           String?
  createdAt      DateTime        @default(now())
  officeServices OfficeService[]
}

model OfficeService {
  id        String   @id @default(uuid())
  officeId  String
  office    Office   @relation(fields: [officeId], references: [id])
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])
  createdAt DateTime @default(now())

  @@unique([officeId, serviceId])
}
